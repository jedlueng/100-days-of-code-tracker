#Jedsada Luengaramsuk (jedsada-io)
#Date: 27 January 2021

Regular expression
- allow you to specify a pattern of text to search for.

Quotes
“Knowing [regular expressions] can mean the difference between
solving a problem in 3 steps and solving it in 3,000 steps. When
you’re a nerd, you forget that the problems you solve with a couple
keystrokes can take other people days of tedious, error-prone
work to slog through." Cory Doctorow

Finding Pattern of text WIthout Regular expression

- This program try to find phone number 415-555-4242 >
- the pattern is three numbers, a hyphen , three numbers , a hyphen and four numbers.
isPhoneNumber.python
----------------------------------------------
#Jedsada Luengaramsuk Jedsada-io
#Date: 27 January 2021
#Source Automated boring stuff with Python textbook
#Find the pattern num/num/num/-/num/num/num/-/num/num/num
def isPhoneNumber(text):
    #If text is not equal 12 return False
    if len(text) != 12:
        return False
    #If text[0:3] is not a decimal return False
    for i in range(0, 3):
        if not text[i].isdecimal():
            return False
    #If text[3] is not '-' return false
    if text[3] != '-':
        return False
    #If text[4:7] is not a decimal return False
    for i in range(4, 7):
        if not text[i].isdecimal():
            return False
    #If text[7] is not equal to '-' return False
    if text[7] != '-':
        return False
    #If text[8:12] is not decimal return False
    for i in range(8, 12):
        if not text[i].isdecimal():
            return False
    return True

print('415-555-4242 is a phone number:')
print(isPhoneNumber('415-555-4242'))
print('Moshi moshi is a phone number:')
print(isPhoneNumber('Moshi moshi'))


#Output
#415-555-4242 is a phone number:
#True
#Moshi moshi is a phone number:
#False
----------------------------------------------

Another method can be shown here by checking for the number chunk by chunk

#Jedsada Luengaramsuk (jedsada-io)
#Date: 27 January 2021
#This program check whether a message have a number
message = 'Call me at 415-555-1011 tomorrow. 415-555-9999 is my office.'
for i in range(len(message)):
    #This loop is running one by one to check the number
    #If the condition is met, it will print Phone number found: + chunk
    chunk = message[i:i+12]
    if isPhoneNumber(chunk):
        print('Phone number found: ' + chunk)
print('Done')

------------------------------------------------

Find Patterns of Text with Regular Expressions (re module)

- regexs for short.
- need to import re module
#Jedsada Luengaramsuk (jedsada-io)
#27 January 2021

#import re module to start using regular expression
import re

#Step 1 create a regex object

#Passing string representation of regular expression to re.compile()
#This is the string representation for 3nums+dash+3nums+dash+4nums
phoneNumRegex = re,compile(r'\d\d\d-\d\d\d-\d\d\d\d')



#Step 2 Matching Regex Objects
#search() method searches the string that match with regex object
mo = phineNumRegex.search('My number is 415-555-4242')
print('Phone number found: ' + mo.group())

#Output
#Phone number found: 415-555-4242

-----------------------------------------------------
Summary of Regular Expresison Matching
1. import re
2. Create a Regex object with re.compile() (need to use a raw string)
3. match object group() method > to return a string of the actual matched text.
-----------------------------------------------------

More Pattern Matching with Regular Expressions.

Grouping with Parentheses
- group() match object method to grab the matching text from just one group.
- adding () will create grups in the regex
  - e.g. (\d\d\d)-(\d\d\d-\d\d\d\d)

  #Jedsada Luengaramsuk (jedsada-io)
  #Date: 28 January 2021

  import re

  #Create regex objectg
  phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
  mo = phoneNumRegex.search('My number is 415-555-4242')


  mo.group(1)
  #This will show group one (\d\d\d)
  mo.group(2)
  #This will show group 2 (\d\d\d\d)

  mo.group(0)
  #This will show no group(\d\d\d)-(\d\d\d-\d\d\d\d)

  mo.group()
  #This will show no group the same as mo.group(0)

  mo.groups()
  #This will retrive all the groups ('group1','group2')


  areaCode, mainNumber = mo.groups()
  #This will name areaCode group1, name mainNumber group2
  print(areaCode)
  #This will print group1
  print(mainNumber)
  #This will print group2
---------------------------------------------

Matching Multiple Groups with the Pipe

| = pipe
| can be use anywhere you want to match.

r'Batman|Tina Fey' = match either 'Batman' or 'Tina Fey'

BatmanorTinafey.py

#Jedsada Luengaramsuk (jedsada.io)
#Date: 28 January 2021

#Regex object match either Batman or Tina Fey
heroRegex = re.compile(r'Batman|Tina Fey)

#matching object 1
mo1 = heroRegex.search('Batman and Tina Fey.')

mo.group()
#This will show 'Batman' because it see Batman before Tina BatmanorTinafey

mo2 = heroRegex.search('Tina Fey and Batman.')
mo2.group()
#This will show Tina Fey because it come before Batman

----------------------------------------------

Optional Matching with the Question Mark
- ? flags the group.
- (wo)? part means that the pattern wo is an optional group
- regex matches both 'Batwoman' and 'Batman'

bat(wo)?man.py

#Jedsada Luengaramsu jedsada-io
#29 January 2021

#Create a regex object with ()?
batRegex = re.compile(r'Bat(wo)?man')


mo1 = batRegex.search('THe Adventures of Batman')


mo1.group()
#This will show Batman because Batman is founded in this text

mo2= batRegex.search('THe Adventures of Batwoman')
mo2.group()
#This one will show Batwoman because it's found.

------------------------------------------------

Matching Zero or More with the Star
- * (star or asterisk)
- match zero or more
- group that precedes the star can occur any number of times in the text.
#Jedsada LUengaramsuk jedsada-io
#29 January 2021

import re

#* mean match zero or more
batRegex = re.compile(r'Bat(wo)*man')

mo1 = batRegex.search('The Adventures of Batman')
mo1.group()
#Batman

mo2 = batRegex.search('The Adventures of Batwoman')
mo2.group()
#Batwoman

mo3 = batRegex.search('The Adventures of Batwowowowoman')
#Batwowowwowoman
#This will match because of * match one or more.
--------------------------------------------------
Matching One or More with the Plus
- + means
- match one or more
- The group need to appear in matching string

(wo)+.py

#Created by Jedsada Luengaramsuk
#Date: 31 January 2021

#Regex object match one or more on (wo)
batRegex = re.compile(r'Bat(wo)+man')

mo1= batRegex.search('The Adventures of Batwoman')
mo1.group()
#This will show Batwoman because it appear in the text

mo2 = batRegex.search('The Adventures of Batwowowowoman')
mo.group()
#THis will show Batwowowowoman because it appear more than one time\

mo3 = batRegex.search('The Adventures of Batman')
mo3 == None
#This won't appear because (wo) does not appear in this text.
--------------------------------------------------
Matching Specific Repetitions with Curly Brackets
- (optional object){number of time it need to appear}

haha.py
#Jedsada Luengaramsuk jedsada-io
import re


#Create regex object. Search for hahaha
haRegex = re.compile(r'(ha){3}')

mo1=haRegex.search('HaHaHa')
mo1.group()
#Show HaHaHa (Perfect matched)

mo2 = haRegex.search('Ha')
mo2 = None
#Return True

#Summary
#()is for the text {} is for the number of times it must appear
--------------------------------------------------

Greedy and Nongreedy Matching
- ? declear nongreedy match
- Greedy match : match the most of that optional regex object
example

greedy.py
#Jedsada Luengaramsuk jedsada-io
#1 Febuary 2021

#Regex object that find 3Ha or 5Ha
greedyHaRegex = re.compile(r'(Ha){3,5}'')
mo1 = greedyHaRegex.search('HaHaHaHaHa')
mo1.group()
#This will show HaHaHaHaHa because it proitize 5 instead of 3



#Search for nongreedy(Smaller) instead
mo2 = nongreedyHaRegex.search('HaHaHaHaHa')
mo2.group()
#HaHaHa This one prioritize the smaller one
-------------------------------------------------

The findall() Method
- findall() method
- return every match in the searched string
- search() only return one (first match)


searchvsfindall.py
#Jedsada Luengaramsuk jedsada-io
#1 Febuary 2021

phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phoneNumRegex.search('Cell: 415-555-9999 Work: 212-555-0000')
mo.group()
#'415-555-9999' will be shown because it's a first matched


#This is when I use findall instead
phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
#['415-555-9999', '212-555-0000'] This will post all the searches

Summary
- findall() return a tuples of string for each grouop



-------------------------------------------------
Character Classes 
